@startuml

title __MODELS's Class Diagram__\n

  namespace usantatecla.mastermind {
    namespace models {
      class usantatecla.mastermind.models.BoardSetup {
          - attempts : int
          - proposedCombinations : List<ProposedCombination>
          - results : List<Result>
          + getAttempts()
          + getLastProposedCombination()
          + getProposedCombinations()
          + getResults()
          ~ BoardSetup()
      }
    }
  }
  

  namespace usantatecla.mastermind {
    namespace models {
      abstract class usantatecla.mastermind.models.Combination {
          # colors : List<Color>
          {static} - WIDTH : int
          {static} + getWidth()
          # Combination()
      }
    }
  }
  

  namespace usantatecla.mastermind {
    namespace models {
      class usantatecla.mastermind.models.Game {
          {static} - MAX_LONG : int
          - attempts : int
          - proposedCombinations : List<ProposedCombination>
          - results : List<Result>
          + Game()
          + addProposedCombination()
          + clear()
          + getAttempts()
          + getBlacks()
          + getBoardSetup()
          + getColors()
          + getWhites()
          + getWidth()
          + isLooser()
          + isWinner()
          + setBoard()
      }
    }
  }
  

  namespace usantatecla.mastermind {
    namespace models {
      class usantatecla.mastermind.models.GameLog {
          - boardSetups : List<BoardSetup>
          + isRedoable()
          + isUndoable()
          + log()
          + redo()
          + reset()
          + undo()
          ~ GameLog()
      }
    }
  }
  

  namespace usantatecla.mastermind {
    namespace models {
      class usantatecla.mastermind.models.ProposedCombination {
          + getColors()
          ~ ProposedCombination()
          ~ contains()
          ~ contains()
      }
    }
  }
  

  namespace usantatecla.mastermind {
    namespace models {
      class usantatecla.mastermind.models.Result {
          - blacks : int
          - whites : int
          ~ Result()
          ~ getBlacks()
          ~ getWhites()
          ~ isWinner()
      }
    }
  }
  

  namespace usantatecla.mastermind {
    namespace models {
      class usantatecla.mastermind.models.SecretCombination {
          ~ SecretCombination()
          ~ getResult()
      }
    }
  }
  

  namespace usantatecla.mastermind {
    namespace models {
      class usantatecla.mastermind.models.Session {
          + Session()
          + addProposedCombination()
          + getAttempts()
          + getBlacks()
          + getColors()
          + getValueState()
          + getWhites()
          + getWidth()
          + isLooser()
          + isRedoable()
          + isUndoable()
          + isWinner()
          + next()
          + redo()
          + reset()
          + undo()
      }
    }
  }
  

  namespace usantatecla.mastermind {
    namespace models {
      class usantatecla.mastermind.models.State {
          + State()
          + getValueState()
          + next()
          + reset()
      }
    }
  }
  

  namespace usantatecla.mastermind {
    namespace models {
      enum StateValue {
        EXIT
        FINAL
        INITIAL
        IN_GAME
      }
    }
  }
  

  usantatecla.mastermind.models.Game o-- usantatecla.mastermind.models.SecretCombination : secretCombination
  usantatecla.mastermind.models.GameLog o-- usantatecla.mastermind.models.Game : game
  usantatecla.mastermind.models.ProposedCombination -up-|> usantatecla.mastermind.models.Combination
  usantatecla.mastermind.models.SecretCombination -up-|> usantatecla.mastermind.models.Combination
  usantatecla.mastermind.models.Session o-- usantatecla.mastermind.models.Game : game
  usantatecla.mastermind.models.Session o-- usantatecla.mastermind.models.GameLog : gameLog
  usantatecla.mastermind.models.Session o-- usantatecla.mastermind.models.State : state
  usantatecla.mastermind.models.State o-- usantatecla.mastermind.models.StateValue : stateValue


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
